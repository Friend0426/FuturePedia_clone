{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/configs/i18nConfigs.ts", "../../../src/lib/contentLayerAdapter.js", "../../../src/plugins/imageMetadata.ts"],
  "sourcesContent": ["import rehypeCodeTitles from 'rehype-code-titles';\nimport rehypePrism from 'rehype-prism-plus';\nimport rehypeSlug from 'rehype-slug';\n\nimport { DEFAULT_LOCALE, LOCALES } from './src/configs/i18nConfigs';\nimport { defineDocumentType, makeSource } from './src/lib/contentLayerAdapter';\nimport imageMetadata from './src/plugins/imageMetadata';\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `content/posts/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      required: true,\n    },\n    slug: {\n      type: 'string',\n      required: true,\n    },\n    date: {\n      type: 'date',\n      required: true,\n    },\n    pricing: {\n      type: 'string',      \n    },\n    start_price: {\n      type: 'string',\n    },\n    socialImage: {\n      type: 'string',\n    },\n    language: {\n      type: 'enum',\n      options: LOCALES,\n      default: DEFAULT_LOCALE,\n    },\n    redirectFrom: {\n      type: 'list',\n      of: { type: 'string' },\n    },\n  },\n  computedFields: {\n    path: {\n      type: 'string',\n      resolve: (post) => `/posts/${post.slug}`,\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Post],\n  mdx: {\n    rehypePlugins: [\n      rehypeSlug, // For generating slugs for headings\n      rehypeCodeTitles, // For adding titles to code blocks\n      [rehypePrism, { ignoreMissing: true }], // For code syntax highlighting\n      imageMetadata, // For adding image metadata (width, height)\n    ],\n  },\n});\n", "export const LOCALES = ['en', 'zh-TW'];\nexport const DEFAULT_LOCALE = 'zh-TW';\n", "import { allPosts, Post } from 'contentlayer/generated';\nimport {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from 'contentlayer/source-files';\nimport { compareDesc } from 'date-fns';\n\nexport { allPosts, defineDocumentType, defineNestedType, makeSource, Post };\n\nexport const allPostsNewToOld =\n  allPosts?.sort((a, b) => {\n    return compareDesc(new Date(a.date), new Date(b.date));\n  }) || [];\n", "// Custom rehype plugin to add width and height to local images\n// To make Next.js <Image/> works\n// Ref: https://kylepfromer.com/blog/nextjs-image-component-blog\n\n// Similiar structure to:\n// https://github.com/JS-DevTools/rehype-inline-svg/blob/master/src/inline-svg.ts\nimport imageSize from 'image-size';\nimport path from 'path';\nimport { getPlaiceholder } from 'plaiceholder';\nimport { Node, visit } from 'unist-util-visit';\nimport { promisify } from 'util';\n\nconst sizeOf = promisify(imageSize);\n\n/**\n * An `<img>` HAST node\n */\ninterface ImageNode extends Node {\n  type: 'element';\n  tagName: 'img';\n  properties: {\n    src: string;\n    height?: number;\n    width?: number;\n    base64?: string;\n  };\n}\n\n/**\n * Determines whether the given HAST node is an `<img>` element.\n */\nfunction isImageNode(node: Node): node is ImageNode {\n  const img = node as ImageNode;\n  return (\n    img.type === 'element' &&\n    img.tagName === 'img' &&\n    img.properties &&\n    typeof img.properties.src === 'string'\n  );\n}\n\n/**\n * Filters out non absolute paths from the public folder.\n */\nfunction filterImageNode(node: ImageNode): boolean {\n  return node.properties.src.startsWith('/');\n}\n\n/**\n * Adds the image's `height` and `width` to it's properties.\n */\nasync function addMetadata(node: ImageNode): Promise<void> {\n  const res = await sizeOf(\n    path.join(process.cwd(), 'public', node.properties.src)\n  );\n\n  if (!res) throw Error(`Invalid image with src \"${node.properties.src}\"`);\n  const { base64 } = await getPlaiceholder(node.properties.src, { size: 10 }); // 10 is to increase detail (default is 4)\n\n  node.properties.width = res.width;\n  node.properties.height = res.height;\n  node.properties.base64 = base64;\n}\n\n/**\n * This is a Rehype plugin that finds image `<img>` elements and adds the height and width to the properties.\n * Read more about Next.js image: https://nextjs.org/docs/api-reference/next/image#layout\n */\nexport default function imageMetadata() {\n  return async function transformer(tree: Node): Promise<Node> {\n    const imgNodes: ImageNode[] = [];\n\n    visit(tree, 'element', (node) => {\n      if (isImageNode(node) && filterImageNode(node)) {\n        imgNodes.push(node);\n      }\n    });\n\n    for (const node of imgNodes) {\n      await addMetadata(node);\n    }\n\n    return tree;\n  };\n}\n"],
  "mappings": "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",
  "names": ["Post"]
}
